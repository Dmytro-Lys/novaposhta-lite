{"version":3,"file":"static/js/159.22abee9e.chunk.js","mappings":"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","sources":["webpack://react-template/./src/components/DocumentsList/DocumentsList.module.css?3540","webpack://react-template/./src/components/GridStatusCell/GridStatusCell.module.css?75c2","components/GridStatusCell/GridStatusCell.jsx","components/DocumentsList/DocumentsList.jsx","components/Pagination/Pagination.jsx","pages/Outgoings.jsx","redux/documents/selectors.js","redux/query/selectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cellCenter\":\"DocumentsList_cellCenter__o-0bq\",\"cellRight\":\"DocumentsList_cellRight__H5623\"};","// extracted by mini-css-extract-plugin\nexport default {\"status\":\"GridStatusCell_status__74g2q\",\"received\":\"GridStatusCell_received__LXL6Y\",\"moved\":\"GridStatusCell_moved__nXHIV\",\"preparation\":\"GridStatusCell_preparation__HsYQ-\",\"change-location\":\"GridStatusCell_change-location__cKsIR\",\"arrived\":\"GridStatusCell_arrived__R36vP\",\"problematic\":\"GridStatusCell_problematic__+sz16\"};","import clsx from \"clsx\"\n\nimport { useDispatch } from \"react-redux\";\nimport { useRef, useEffect } from \"react\";\nimport { fetchDocumentStatus } from 'API/novaposhtaAxiosAPI';\nimport css from './GridStatusCell.module.css'\n\nconst GridStatusCell = ({ text, Number }) => {\n    const dispatch = useDispatch()\n    const firstRender = useRef(true)\n  const { REACT_APP_TRACKING_API_KEY } = process.env;\n  \n    useEffect(() => {\n        if (firstRender.current) {\n            firstRender.current = false\n            return\n        }\n      if (!REACT_APP_TRACKING_API_KEY) return\n      if (text === 'У дорозі' || text === 'Готується до відправлення' || text === 'Змінено адресу') {\n        dispatch(fetchDocumentStatus({\n          apiKey: REACT_APP_TRACKING_API_KEY,\n          modelName: 'InternetDocument',\n          calledMethod: \"getDocumentsEWMovement\",\n          language: \"uk\",\n          methodProperties: {\n            Number,\n            NewFormat: 1\n          },\n          system: \"Tracking\"\n        }))\n      };\n  }, [dispatch, text, Number, REACT_APP_TRACKING_API_KEY]);  \n  \n  const getStatusClass = statusName => {\n    switch (statusName) {\n      case 'Прибув у відділення': return css.arrived;\n      case 'Отримано': return css.received;\n      case 'Проблемні': return css.problematic;\n      case 'Готується до відправлення': return css.preparation;\n      case 'Змінено адресу': return css['change-location'];\n      default: return css.moved;\n      }\n      \n\n  }  \n    return (\n        <span className={clsx(css.status, getStatusClass(text))}>{text}</span>\n    )\n}\n\nexport default GridStatusCell\n","// import clsx from \"clsx\"\n// import { DataGrid } from '@mui/x-data-grid';\nimport { formatDate } from 'API/helpers';\nimport { useSelector } from 'react-redux';\nimport { getDocuments } from 'redux/documents/selectors';\n// import { getLimit, getPage } from 'redux/query/selectors';\n\n\nimport css from './DocumentsList.module.css'\nimport 'react-data-grid/lib/styles.css';\nimport './CustomGridStyles.css';\nimport ReactDataGrid from 'react-data-grid';\nimport GridStatusCell from \"components/GridStatusCell/GridStatusCell\";\n\n\nconst DocumentsList = () => {\n\n  const documents = useSelector(getDocuments)\n \n  const columns = [\n    { key: 'id', name: 'Номер', width: 120, headerCellClass: css.cellCenter,  cellClass: css.cellCenter},\n    { key: 'TrackingStatusName', name: 'Статус', width: 100, headerCellClass: css.cellCenter },\n    { key: 'TrackingCurrentStatus', name: 'Детальний статус', width: 180, headerCellClass: css.cellCenter},\n    { key: 'DateTime', name: 'Дата створення', width: 90 },\n    { key: 'ScheduledDeliveryDate', name: 'Плановий час доставки', width: 105},\n    { key: 'Cost', name: 'Оголошена вартість', width: 100, headerCellClass: css.cellCenter, cellClass: css.cellRight },\n    { key: 'DocumentCost', name: 'Вартість доставки', width: 100, headerCellClass: css.cellCenter, cellClass: css.cellRight },\n    { key: 'DocumentWeight', name: 'Вага', width: 70, headerCellClass: css.cellCenter, cellClass: css.cellRight },\n    { key: 'SeatsAmount', name: 'Кількість місць', width: 80, headerCellClass: css.cellCenter, cellClass: css.cellCenter },\n    { key: 'CargoDescription', name: 'Опис відправлення', width: 120 },\n    { key: 'CounterpartySenderDescription', name: 'Відправник', width: 120 },\n    { key: 'SenderName', name: 'Контакт відправника', width: 110 },\n    { key: 'PhoneSender', name: 'Телефон відправника', width: 100 },\n    { key: 'SenderAddressDescription', name: 'Адреса відправлення', width: 180 }, \n    { key: 'CounterpartyRecipientDescription', name: 'Отримувач', width: 120 },\n    { key: 'RecipientName', name: 'Контакт отримувача', width: 110 },\n    { key: 'PhoneRecipient', name: 'Телефон отримувача', width: 100 },\n    { key: 'RecipientAddressDescription', name: 'Адреса отримання', width: 180 },\n    { key: 'PayerType', name: 'Платник за доставку', width: 100 },\n    { key: 'FirstDayStorage', name: 'Платне зберігання', width: 90 },\n    { key: 'ReceivingDateTime', name: 'Дата отримання', width: 90 },\n    { key: 'Note', name: 'Додаткова інформація', width: 100 },\n  ]\n\n  const rows = documents && documents.length > 0 ?  documents.map(({\n    Number,\n    TrackingStatusName, \n    TrackingCurrentStatus = '',\n    DateTime,\n    ScheduledDeliveryDate,\n    Cost,\n    DocumentCost,\n    DocumentWeight,\n    SeatsAmount,\n    CargoDescription,\n    CounterpartySenderDescription,\n    SenderName,\n    PhoneSender,\n    SenderAddressDescription,\n    CounterpartyRecipientDescription,\n    RecipientName,\n    PhoneRecipient,\n    RecipientAddressDescription,\n    PayerType,\n    FirstDayStorage,\n    ReceivingDateTime,\n    Note\n  }) => {\n    return {\n      id: Number,\n      TrackingStatusName: <GridStatusCell text={TrackingStatusName} Number={Number} />, //   spanFormatter( TrackingStatusName),\n      TrackingCurrentStatus,\n      DateTime: formatDate(DateTime),\n      ScheduledDeliveryDate: formatDate(ScheduledDeliveryDate),\n      Cost: `${Cost} грн`,\n      DocumentCost: `${DocumentCost} грн`,\n      DocumentWeight: `${DocumentWeight} кг`,\n      SeatsAmount,\n      CargoDescription,\n      CounterpartySenderDescription,\n      SenderName,\n      PhoneSender,\n      SenderAddressDescription,\n      CounterpartyRecipientDescription,\n      RecipientName,\n      PhoneRecipient,\n      RecipientAddressDescription,\n      PayerType: PayerType === 'Recipient' ? 'Отримувач' : 'Відправник',\n      FirstDayStorage: formatDate(FirstDayStorage),\n      ReceivingDateTime: formatDate(ReceivingDateTime),\n      Note\n    }\n  }) : []\n    return (\n        <ReactDataGrid\n          rows={rows}\n        // rowsCount={pageSize + 1}\n        \n          columns={columns}\n          headerRowHeight={40}\n          rowHeight={74}\n        />\n    )\n}\n\nexport default DocumentsList","import * as React from 'react';\nimport TablePagination from '@mui/material/TablePagination';\nimport { getLimit, getPage } from 'redux/query/selectors';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setLimit, setPage } from 'redux/query/querySlice';\nimport { getDocumentsCount } from 'redux/documents/selectors';\n\n\nconst Pagination = () => {\n    const dispatch = useDispatch();\n    const limit = useSelector(getLimit)\n    const page = useSelector(getPage)\n    const count = useSelector(getDocumentsCount)\n    const handleChangePage = (event,  newPage) => {\n        dispatch(setPage(newPage + 1))\n    }\n    const handleChangeRowsPerPage = (event) => {\n      dispatch(setLimit(parseInt(event.target.value, 10)))  \n      dispatch(setPage(1))     \n    };\n    \n    return (\n        <TablePagination\n            component=\"div\"\n            count={count}\n            page={page - 1}\n            onPageChange={handleChangePage}\n            rowsPerPage={limit}\n            rowsPerPageOptions={[5, 10, 20, 50, 100]}\n            labelRowsPerPage ='Елементів на сторінці'\n            onRowsPerPageChange={handleChangeRowsPerPage}\n    />\n    )\n}\n\nexport default Pagination","import {  useSelector, useDispatch } from 'react-redux';\nimport { getSelectApiKey } from 'redux/receivers/selectors';\nimport { getLimit, getPage } from 'redux/query/selectors';\nimport { fetchDocuments } from 'API/novaposhtaAxiosAPI';\nimport { getDateFrom, getDateTo } from 'API/helpers';\n\nimport {  useEffect, useRef } from 'react';\nimport DocumentsList from 'components/DocumentsList/DocumentsList';\nimport Pagination from 'components/Pagination/Pagination';\n\n\nconst Outgoings = () => {\n     const dispatch = useDispatch()\n    const apiKey = useSelector(getSelectApiKey)\n    const Limit = useSelector(getLimit)\n    const Page = useSelector(getPage)\n    const firstRender = useRef(true)\n  \n    useEffect(() => {\n        if (firstRender.current) {\n            firstRender.current = false\n            return\n        }\n        if (!apiKey) return\n        dispatch(fetchDocuments({\n                apiKey,\n                modelName: 'InternetDocument',\n                calledMethod: \"getOutgoingDocumentsByPhone\",\n                methodProperties: {\n                    DateTimeFrom: getDateFrom(),\n                    DateTimeTo: getDateTo(),\n                    Limit,\n                    Page\n                }\n            }));\n    }, [dispatch, apiKey, Limit, Page]);\n    \n    return (\n         <div>\n            <DocumentsList />\n            <Pagination />\n         </div> \n    )\n}\n\nexport default Outgoings","export const getDocuments = state => state.documents.items\nexport const getDocumentsCount = state => state.documents.count","export const getLimit = state => state.query.limit\nexport const getPage = state => state.query.page"],"names":["text","Number","dispatch","useDispatch","firstRender","useRef","REACT_APP_TRACKING_API_KEY","process","useEffect","current","fetchDocumentStatus","apiKey","modelName","calledMethod","language","methodProperties","NewFormat","system","className","clsx","css","statusName","getStatusClass","documents","useSelector","getDocuments","columns","key","name","width","headerCellClass","cellClass","rows","length","map","TrackingStatusName","TrackingCurrentStatus","DateTime","ScheduledDeliveryDate","Cost","DocumentCost","DocumentWeight","SeatsAmount","CargoDescription","CounterpartySenderDescription","SenderName","PhoneSender","SenderAddressDescription","CounterpartyRecipientDescription","RecipientName","PhoneRecipient","RecipientAddressDescription","PayerType","FirstDayStorage","ReceivingDateTime","Note","id","formatDate","headerRowHeight","rowHeight","limit","getLimit","page","getPage","count","getDocumentsCount","component","onPageChange","event","newPage","setPage","rowsPerPage","rowsPerPageOptions","labelRowsPerPage","onRowsPerPageChange","setLimit","parseInt","target","value","getSelectApiKey","Limit","Page","fetchDocuments","DateTimeFrom","getDateFrom","DateTimeTo","getDateTo","state","items","query"],"sourceRoot":""}