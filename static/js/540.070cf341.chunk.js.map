{"version":3,"file":"static/js/540.070cf341.chunk.js","mappings":"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","sources":["redux/query/selectors.js","API/helpers.js","redux/documents/selectors.js","components/DocumentsList/DocumentsList.jsx","components/Pagination/Pagination.jsx","pages/Incomings.jsx"],"sourcesContent":["export const getLimit = state => state.query.limit\nexport const getPage = state => state.query.page","\nexport const formatDate = (dateString, withTime = true) => {\n    if (dateString.length === 0) return ''\n    const date = new Date(dateString)\n    if (date.getTime === 0) return ''\n    const day = String(date.getDate()).padStart(2, '0')\n    const month = String(date.getMonth() + 1).padStart(2, '0')\n    const year = String(date.getFullYear())\n    const formattedDate = `${day}.${month}.${year}`\n    if (withTime) {\n      const hours = String(date.getHours()).padStart(2, '0')\n      const minutes = String(date.getMinutes()).padStart(2, '0')\n      const seconds = String(date.getSeconds()).padStart(2, '0')  \n      return `${formattedDate} ${hours}:${minutes}:${seconds}`   \n    }\n    return formattedDate\n}\n\nexport const getDateFrom = () => {\n  const date = new Date()\n  date.setMonth(date.getMonth() - 3)\n  date.setHours(0, 0, 0, 0)\n  return formatDate(date.toString())\n}\n\nexport const getDateTo = () => {\n  const date = new Date()\n  date.setMonth(date.getMonth() + 1)\n  date.setHours(0, 0, 0, 0)\n  return formatDate(date.toString())\n}","export const getDocuments = state => state.documents.items\nexport const getDocumentsCount = state => state.documents.count","import Box from '@mui/material/Box';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { formatDate } from 'API/helpers';\nimport { useSelector } from 'react-redux';\nimport { getDocuments } from 'redux/documents/selectors';\nimport { getLimit, getPage } from 'redux/query/selectors';\n\n\nconst DocumentsList = () => {\n\n    const documents = useSelector(getDocuments)\n    const pageSize = useSelector(getLimit)\n    const page = useSelector(getPage)\n\n    const columns = [\n        { field: 'id', headerName: 'Номер', width: 140 },\n        { field: 'TrackingStatusName', headerName: 'Статус', width: 100 },\n        { field: 'DateTime', headerName: 'Дата створення', width: 100 },\n        { field: 'ScheduledDeliveryDate', headerName: 'Плановий час доставки', width: 100 },\n        { field: 'Cost', headerName: 'Оголошена вартість', width: 100 },\n        { field: 'DocumentCost', headerName: 'Вартість доставки', width: 100 },\n        { field: 'DocumentWeight', headerName: 'Вага', width: 70 },\n        { field: 'SeatsAmount', headerName: 'Кількість місць', width: 50 },\n        { field: 'CargoDescription', headerName: 'Опис відправлення', width: 100 },\n        { field: 'CounterpartySenderDescription', headerName: 'Відправник', width: 100 },\n        { field: 'SenderName', headerName: 'Контакт відправника', width: 100 },\n        { field: 'PhoneSender', headerName: 'Телефон відправника', width: 100 },\n        { field: 'SenderAddressDescription', headerName: 'Адреса відправлення', width: 100 },\n        { field: 'RecipientName', headerName: 'Контакт отримувача', width: 100 },\n        { field: 'PhoneRecipient', headerName: 'Телефон отримувача', width: 100 },\n        { field: 'RecipientAddressDescription', headerName: 'Адреса отримання', width: 100 },\n        { field: 'PayerType', headerName: 'Платник за доставку', width: 100 },\n        { field: 'FirstDayStorage', headerName: 'Платне зберігання', width: 100 },\n        { field: 'ReceivingDateTime', headerName: 'Дата отримання', width: 100 },\n        { field: 'Note', headerName: 'Додаткова інформація', width: 100 },\n    ]\n\n    const rows = documents.map(({\n        Number,\n        TrackingStatusName,\n        DateTime,\n        ScheduledDeliveryDate,\n        Cost,\n        DocumentCost,\n        DocumentWeight,\n        SeatsAmount,\n        CargoDescription,\n        CounterpartySenderDescription,\n        SenderName,\n        PhoneSender,\n        SenderAddressDescription,\n        RecipientName,\n        PhoneRecipient,\n        RecipientAddressDescription,\n        PayerType,\n        FirstDayStorage,\n        ReceivingDateTime,\n        Note\n    }) => {\n        return {\n            id: Number,\n            TrackingStatusName,\n            DateTime: formatDate(DateTime),\n            ScheduledDeliveryDate: formatDate(ScheduledDeliveryDate),\n            Cost: `${Cost} грн`,\n            DocumentCost: `${DocumentCost} грн`,\n            DocumentWeight: `${DocumentWeight} кг`,\n            SeatsAmount,\n            CargoDescription,\n            CounterpartySenderDescription,\n            SenderName,\n            PhoneSender,\n            SenderAddressDescription,\n            RecipientName,\n            PhoneRecipient,\n            RecipientAddressDescription,\n            PayerType: PayerType === 'Recipient' ? 'Отримувач' : 'Відправник',\n            FirstDayStorage: formatDate(FirstDayStorage),\n            ReceivingDateTime: formatDate(ReceivingDateTime),\n            Note\n        }\n    })\n    return (\n        <Box sx={{ minHeight: 50, width: '100%' }}>\n        <DataGrid\n          rows={rows}\n          columns={columns}\n          hideFooter\n          // hideFooterPagination\n        // initialState={{\n        //   pagination: {\n    \n        //     paginationModel: {\n        //       pageSize,\n        //     },\n        //   },\n        //   }}\n        //  pageSize={pageSize}\n          pageSizeOptions={[5, 10, 20, 50, 100]}\n          paginationModel={{\n            page: page - 1,\n            pageSize\n          }} \n        // checkboxSelection\n        disableRowSelectionOnClick\n      />\n    </Box>\n    )\n}\n\nexport default DocumentsList","import * as React from 'react';\nimport TablePagination from '@mui/material/TablePagination';\nimport { getLimit, getPage } from 'redux/query/selectors';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setLimit, setPage } from 'redux/query/querySlice';\nimport { getDocumentsCount } from 'redux/documents/selectors';\n\n\nconst Pagination = () => {\n    const dispatch = useDispatch();\n    const limit = useSelector(getLimit)\n    const page = useSelector(getPage)\n    const count = useSelector(getDocumentsCount)\n    // console.log(count)\n    const handleChangePage = (event,  newPage) => {\n        dispatch(setPage(newPage + 1))\n    }\n    const handleChangeRowsPerPage = (event) => {\n      dispatch(setLimit(parseInt(event.target.value, 10)))  \n      dispatch(setPage(1))     \n    };\n    \n    return (\n        <TablePagination\n            component=\"div\"\n            count={count}\n            page={page - 1}\n            onPageChange={handleChangePage}\n            rowsPerPage={limit}\n            rowsPerPageOptions={[5, 10, 20, 50, 100]}\n            labelRowsPerPage ='Елементів на сторінці'\n            onRowsPerPageChange={handleChangeRowsPerPage}\n    />\n    )\n}\n\nexport default Pagination","import Container from '@mui/material/Container';\n// import { useGetIncomingDocumentsMutation } from 'API/novaposhtaApi';\nimport {  useSelector, useDispatch } from 'react-redux';\nimport { getSelectApiKey } from 'redux/receivers/selectors';\nimport { getLimit, getPage } from 'redux/query/selectors';\nimport { fetchDocuments } from 'API/novaposhtaAxiosAPI';\nimport { getDateFrom, getDateTo } from 'API/helpers';\n\nimport {  useEffect, useRef } from 'react';\nimport DocumentsList from 'components/DocumentsList/DocumentsList';\nimport Pagination from 'components/Pagination/Pagination';\n\nconst Incomings = () => {\n    // const [data, setData]= useState([])\n    const dispatch = useDispatch()\n    const apiKey = useSelector(getSelectApiKey)\n    const Limit = useSelector(getLimit)\n    const Page = useSelector(getPage)\n    const firstRender = useRef(true)\n    \n    // const [ getIncomingDocuments, {isError, error} ] = useGetIncomingDocumentsMutation()\n    // console.log(data)\n    // const handleGetDocuments = useCallback( async () => {\n    //     try {\n    //         const documents = await getIncomingDocuments({\n    //             apiKey,\n    //             modelName: 'InternetDocument',\n    //             calledMethod: \"getIncomingDocumentsByPhone\",\n    //             methodProperties: {\n    //                 DateTimeFrom: getDateFrom(),\n    //                 DateTimeTo: getDateTo(),\n    //                 Limit,\n    //                 Page\n    //             }\n    //         }).unwrap()\n    //         if (!documents) throw new Error('data not found')\n    //         setData(documents.data[0].result)\n    //         // return(<DocumentsList documents={documents.data[0].result}/>)\n    //         // console.log(data)\n    //     } catch (error) {\n    //         console.log (error)\n    //     }\n    // },[getIncomingDocuments, apiKey, Limit, Page])\n    // if (isError) console.log(error)\n    // handleGetDocuments()\n    useEffect(() => {\n        if (firstRender.current) {\n            firstRender.current = false\n            return\n        }\n        dispatch(fetchDocuments({\n                apiKey,\n                modelName: 'InternetDocument',\n                calledMethod: \"getIncomingDocumentsByPhone\",\n                methodProperties: {\n                    DateTimeFrom: getDateFrom(),\n                    DateTimeTo: getDateTo(),\n                    Limit,\n                    Page\n                }\n            }));\n  }, [dispatch, apiKey, Limit, Page]);\n    \n    \n    return (\n         <Container component=\"main\" maxWidth='100%'>\n            {/* <h2>Вхідні посилки</h2> */}\n            {/* <ErrorMessage /> */}\n            <DocumentsList />\n            <Pagination/>\n          {/* <Loader /> */}\n        </Container>\n    )\n}\n\nexport default Incomings"],"names":["getLimit","state","query","limit","getPage","page","formatDate","dateString","withTime","length","date","Date","getTime","day","String","getDate","padStart","month","getMonth","year","getFullYear","formattedDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","getDateFrom","setMonth","setHours","toString","getDateTo","getDocuments","documents","items","getDocumentsCount","count","useSelector","pageSize","rows","map","Number","TrackingStatusName","DateTime","ScheduledDeliveryDate","Cost","DocumentCost","DocumentWeight","SeatsAmount","CargoDescription","CounterpartySenderDescription","SenderName","PhoneSender","SenderAddressDescription","RecipientName","PhoneRecipient","RecipientAddressDescription","PayerType","FirstDayStorage","ReceivingDateTime","Note","id","Box","sx","minHeight","width","DataGrid","columns","field","headerName","hideFooter","pageSizeOptions","paginationModel","disableRowSelectionOnClick","dispatch","useDispatch","TablePagination","component","onPageChange","event","newPage","setPage","rowsPerPage","rowsPerPageOptions","labelRowsPerPage","onRowsPerPageChange","setLimit","parseInt","target","value","apiKey","getSelectApiKey","Limit","Page","firstRender","useRef","useEffect","current","fetchDocuments","modelName","calledMethod","methodProperties","DateTimeFrom","DateTimeTo","Container","maxWidth"],"sourceRoot":""}